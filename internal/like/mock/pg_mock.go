// Code generated by MockGen. DO NOT EDIT.
// Source: internal/like/interface.go

// Package mock_like is a generated GoMock package.
package mock_like

import (
	context "context"
	reflect "reflect"

	entity "github.com/BuiNhatTruong99/TikTok-Go/internal/like/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateLike mocks base method.
func (m *MockRepository) CreateLike(ctx context.Context, likeRequest *entity.LikeRequest) (*entity.LikeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", ctx, likeRequest)
	ret0, _ := ret[0].(*entity.LikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockRepositoryMockRecorder) CreateLike(ctx, likeRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockRepository)(nil).CreateLike), ctx, likeRequest)
}

// DeleteLike mocks base method.
func (m *MockRepository) DeleteLike(ctx context.Context, likeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", ctx, likeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockRepositoryMockRecorder) DeleteLike(ctx, likeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockRepository)(nil).DeleteLike), ctx, likeID)
}

// GetLikeByID mocks base method.
func (m *MockRepository) GetLikeByID(ctx context.Context, likeID int64) (*entity.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeByID", ctx, likeID)
	ret0, _ := ret[0].(*entity.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeByID indicates an expected call of GetLikeByID.
func (mr *MockRepositoryMockRecorder) GetLikeByID(ctx, likeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeByID", reflect.TypeOf((*MockRepository)(nil).GetLikeByID), ctx, likeID)
}

// GetLikeByUserAndPost mocks base method.
func (m *MockRepository) GetLikeByUserAndPost(ctx context.Context, like *entity.LikeRequest) (*entity.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeByUserAndPost", ctx, like)
	ret0, _ := ret[0].(*entity.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeByUserAndPost indicates an expected call of GetLikeByUserAndPost.
func (mr *MockRepositoryMockRecorder) GetLikeByUserAndPost(ctx, like interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeByUserAndPost", reflect.TypeOf((*MockRepository)(nil).GetLikeByUserAndPost), ctx, like)
}

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// LikePost mocks base method.
func (m *MockUsecase) LikePost(ctx context.Context, likeRequest *entity.LikeRequest) (*entity.LikeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePost", ctx, likeRequest)
	ret0, _ := ret[0].(*entity.LikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikePost indicates an expected call of LikePost.
func (mr *MockUsecaseMockRecorder) LikePost(ctx, likeRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockUsecase)(nil).LikePost), ctx, likeRequest)
}

// UndoLikePost mocks base method.
func (m *MockUsecase) UndoLikePost(ctx context.Context, likeRequest *entity.LikeDeleteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndoLikePost", ctx, likeRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndoLikePost indicates an expected call of UndoLikePost.
func (mr *MockUsecaseMockRecorder) UndoLikePost(ctx, likeRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndoLikePost", reflect.TypeOf((*MockUsecase)(nil).UndoLikePost), ctx, likeRequest)
}
